/*
 * UmbraClient Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge by LiquidBounce.
 * https://github.com/xxCichyxx/UmbraClient
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.script.api.global.Chat
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.FloatValue
import net.minecraft.network.play.server.S32PacketConfirmTransaction
import kotlin.math.max

object Debug : Module("Debug", Category.EXPLOIT, hideModule = false) {

    var transaction by BoolValue("Transaction", false)
    val anticheatDetect by BoolValue("AnticheatDetect", false)
    private val debugValue by BoolValue("Debug", false)

    // Lista numerów transakcji, które będą zbierane w trakcie 5-sekundowej sesji
    private val transactionNumbers = mutableListOf<Int>()

    // Listy liczb przypisane do różnych antycheatów
    private val takaList = listOf(-23767, -23766, -23765, -23764, -23763, -23762, -23761)
    private val vulcanList = (-23767..-23574)
    private val grimACList = (-13..0).toList()
    private val matrixList = listOf(32767, 32766, 32765, 32764, 32763, 32762, 32761)
    private val karhuList = listOf(-3000, -3001, -3002, -3003, -3004, -3005, -3006)
    private val aacList = listOf(-23767, -23766, -23765, -23764, -23763, -23762, -23761)
    private val intaveOldList = listOf(-1, -2)
    private val intaveLatestList = listOf(40450, -24421, 53232, 23241, -210)
    private val polarList = listOf(-1520, -250, -251, -252)
    private val sparkyList = listOf(5401, -4350, 5402, -4351, 5403, -4352)
    private val matrixOldRange = (-19999..-19800)

    @EventTarget
    fun onPacket(event: PacketEvent) {
        if (event.packet is S32PacketConfirmTransaction) {
            val packet = event.packet as S32PacketConfirmTransaction
            val actionNumber = packet.actionNumber.toInt()

            // Jeśli Transaction jest włączone, dodajemy numer transakcji do listy
            if (transaction) {
                transactionNumbers.add(actionNumber)
                debugMessage("Debug Transaction: $actionNumber")
            }
        }
    }

    // Uruchamiamy proces detekcji antycheatów
    override fun onEnable() {
        // Jeśli włączona jest opcja AnticheatDetect
        if (anticheatDetect) {
            // Informacja na czacie o rozpoczęciu
            debugMessage("Proces...")

            // Włączamy Transaction na czas detekcji
            transaction = true

            // Uruchamiamy korutynę (odpowiednik wątku), aby po 5 sekundach zatrzymać Transaction i przeanalizować dane
            GlobalScope.launch {
                delay(5000L) // Czekamy 5 sekund

                // Wyłączamy Transaction po 5 sekundach
                transaction = false

                // Analiza zebranych transakcji
                analyzeTransactions()

                // Czyścimy listę zebranych transakcji
                transactionNumbers.clear()
            }
        }
    }

    // Funkcja do analizy zebranych transakcji
    private fun analyzeTransactions() {
        val detectedAnticheats = mutableListOf<String>()

        // Sprawdzamy, które antycheaty pasują do zebranych numerów transakcji
        if (transactionNumbers.any { it in takaList }) detectedAnticheats.add("Taka")
        if (transactionNumbers.any { it in vulcanList }) detectedAnticheats.add("Vulcan")
        if (transactionNumbers.any { it in grimACList }) detectedAnticheats.add("GrimAC")
        if (transactionNumbers.any { it in matrixList }) detectedAnticheats.add("Matrix")
        if (transactionNumbers.any { it in matrixOldRange }) detectedAnticheats.add("Matrix")
        if (transactionNumbers.any { it in karhuList }) detectedAnticheats.add("Karhu")
        if (transactionNumbers.any { it < -4000 && it > -4100 }) detectedAnticheats.add("Verus")
        if (transactionNumbers.any { it in aacList }) detectedAnticheats.add("AAC")
        if (transactionNumbers.any { it == 32767 }) detectedAnticheats.add("Frequency")
        if (transactionNumbers.any { it in intaveOldList || (it in -30..-20) }) detectedAnticheats.add("Intave (Old)")
        if (transactionNumbers.any { it in intaveLatestList }) detectedAnticheats.add("Intave (Latest)")
        if (transactionNumbers.any { it in polarList }) detectedAnticheats.add("Polar")
        if (transactionNumbers.any { it in sparkyList }) detectedAnticheats.add("Sparky")

        // Wyświetlenie wykrytych antycheatów
        if (detectedAnticheats.isNotEmpty()) {
            debugMessage("Wykryto Podobienstwo anticheat(s): ${detectedAnticheats.joinToString(", ")}")
        } else {
            debugMessage("Nie wykryto Anticheat nie ma Debugow Transaction")
        }
    }
    fun debugMessage(str: String) {
        if (debugValue) {
            Chat.print("§f$str")
        }
    }
}
