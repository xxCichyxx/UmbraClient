/*
 * FDPClient Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge by LiquidBounce.
 * https://github.com/SkidderMC/FDPClient/
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.FDPClient.eventManager
import net.ccbluex.liquidbounce.event.EventState
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.utils.PacketUtils.sendPacket
import net.ccbluex.liquidbounce.utils.PacketUtils.sendPackets
import net.ccbluex.liquidbounce.utils.extensions.component1
import net.ccbluex.liquidbounce.utils.extensions.component2
import net.ccbluex.liquidbounce.utils.extensions.component3
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.FloatValue
import net.ccbluex.liquidbounce.value.IntegerValue
import net.ccbluex.liquidbounce.value.ListValue
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition
import net.minecraft.network.play.client.C03PacketPlayer.C06PacketPlayerPosLook
import net.minecraft.network.play.server.S19PacketEntityStatus

object Damage : Module("Damage", Category.EXPLOIT, canBeEnabled = false, hideModule = false) {

    private val mode by ListValue("Mode", arrayOf("Fake", "NCP", "AAC", "Verus"), "NCP")
    private val verusMode by ListValue("VerusMode", arrayOf("Default", "Damage1", "Damage2", "Damage3", "Damage4", "CustomDamage"), "Damage1") { mode.equals("Verus", true) }
    private val ncpMode by ListValue("NCPMode", arrayOf("Glitch", "JumpPacket"), "Glitch") { mode.equals("NCP", true) }
    private val packet1 by FloatValue("CustomDamage-Packet1Clip", 4f, 0f..5f) { mode.equals("Verus", true) && verusMode.equals("CustomDamage", true) }
    private val packet2 by FloatValue("CustomDamage-Packet2Clip", -0.2f, -1f.. 5f) { mode.equals("Verus", true) && verusMode.equals("CustomDamage", true) }
    private val packet3 by FloatValue("CustomDamage-Packet3Clip", 0.5f, 0f.. 5f) { mode.equals("Verus", true) && verusMode.equals("CustomDamage", true) }
    private val damage by IntegerValue("Damage", 1, 1..20)
    private val onlyGround by BoolValue("OnlyGround", true)
    private val jumpYPosArr = arrayOf(0.41999998688698, 0.7531999805212, 1.00133597911214, 1.16610926093821, 1.24918707874468, 1.24918707874468, 1.1707870772188, 1.0155550727022, 0.78502770378924, 0.4807108763317, 0.10408037809304, 0.0)

    override fun onEnable() {
        val thePlayer = mc.thePlayer ?: return

        if (onlyGround && !thePlayer.onGround) {
            return
        }

        when (mode.lowercase()) {
            "fake" -> {
                val event = PacketEvent(S19PacketEntityStatus(thePlayer, 2.toByte()), EventState.RECEIVE)
                eventManager.callEvent(event)
                if (!event.isCancelled) {
                    thePlayer.handleStatusUpdate(2.toByte())
                }
            }
            "ncp" -> {
                when (ncpMode.lowercase()) {
                    "glitch" -> {
                        val (x, y, z) = thePlayer

                        repeat(65 * damage) {
                            sendPackets(
                                C04PacketPlayerPosition(x, y + 0.049, z, false),
                                C04PacketPlayerPosition(x, y, z, false)
                            )
                        }
                        sendPacket(C04PacketPlayerPosition(x, y, z, true))
                    }
                    "jumppacket" -> {
                        val (x, y, z) = thePlayer

                        repeat(4) {
                            jumpYPosArr.forEach {
                                sendPacket(C04PacketPlayerPosition(x, y + it, z, false))
                            }
                            sendPacket(C04PacketPlayerPosition(x, y, z, false))
                        }
                        sendPacket(C04PacketPlayerPosition(x, y, z, true))
                    }
                }
            }
            "aac" -> thePlayer.motionY = 5 * damage.toDouble()
            "verus" -> {
                when (verusMode.lowercase()) {
                    "default" -> {
                        // Note: you'll flag once or twice
                        sendPacket(C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY + 3.0001, thePlayer.posZ, false))
                        sendPacket(C06PacketPlayerPosLook(thePlayer.posX, thePlayer.posY, thePlayer.posZ, thePlayer.rotationYaw, thePlayer.rotationPitch, false))
                        sendPacket(C06PacketPlayerPosLook(thePlayer.posX, thePlayer.posY, thePlayer.posZ, thePlayer.rotationYaw, thePlayer.rotationPitch, true))
                    }
                    "damage1" -> {
                        sendPackets(
                            C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY + 3.05, thePlayer.posZ, false),
                            C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY, thePlayer.posZ, false),
                            C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY + 0.41999998688697815, thePlayer.posZ, true)
                        )
                    }
                    "damage2" -> {
                        sendPackets(
                            C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY + 3.35, thePlayer.posZ, false),
                            C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY, thePlayer.posZ, false),
                            C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY, thePlayer.posZ, true)
                        )
                    }
                    "damage3" -> {
                        sendPackets(
                            C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY + 4, thePlayer.posZ, false),
                            C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY, thePlayer.posZ, false),
                            C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY, thePlayer.posZ, true)
                        )
                    }
                    "damage4" -> {
                        sendPackets(
                            C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY + 3.42, thePlayer.posZ, false),
                            C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY, thePlayer.posZ, false),
                            C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY, thePlayer.posZ, true)
                        )
                    }
                    "customdamage" -> {
                        sendPackets(
                            C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY + packet1.toDouble(), thePlayer.posZ, false),
                            C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY + packet2.toDouble(), thePlayer.posZ, false),
                            C04PacketPlayerPosition(thePlayer.posX, thePlayer.posY + packet3.toDouble(), thePlayer.posZ, true)
                        )
                    }
                }
            }
        }
    }
}