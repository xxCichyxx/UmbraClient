/*
 * UmbraClient Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge by LiquidBounce.
 * https://github.com/xxCichyxx/UmbraClient
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.ListValue
import net.ccbluex.liquidbounce.value.TextValue
import net.minecraft.network.play.client.C01PacketChatMessage

object ForceUnicodeChat : Module("ForceUnicodeChat", Category.EXPLOIT, subjective = true, gameDetecting = false, hideModule = false) {

    // ListValue dla wyboru rodzaju Unicode (Fullwidth, Superscript, Subscript, Strikethrough, Normal)
    private val unicodeModeValue = ListValue("UnicodeMode", arrayOf("Fullwidth", "Subscript", "Strikethrough", "Normal"), "Fullwidth")

    // BooleanValue dla włączenia niestandardowego prefiksu
    private val customPrefixValue = BoolValue("CustomPrefix", false)

    // TextValue dla ustalenia tekstu niestandardowego prefiksu
    private val customPrefixText = TextValue("PrefixMessage", "!")

    @EventTarget
    fun onPacket(event: PacketEvent) {
        if (event.packet is C01PacketChatMessage) {
            val chatMessage = event.packet
            val originalMessage = chatMessage.message

            // Ignorujemy wiadomości zaczynające się od "/"
            if (originalMessage.startsWith("/")) return

            val stringBuilder = StringBuilder()

            // Dodawanie niestandardowego prefiksu (bez Unicode) jeśli włączony
            if (customPrefixValue.get()) {
                stringBuilder.append(customPrefixText.get())  // Dodajemy prefiks bez konwersji Unicode
            }

            // Przetwarzanie wiadomości w zależności od wybranego trybu Unicode
            when (unicodeModeValue.get().toLowerCase()) {
                "fullwidth" -> {
                    // Fullwidth Unicode (zmiana zakresu znaków tylko dla wiadomości, bez prefiksu)
                    for (c in originalMessage.toCharArray()) {
                        if (c.code in 33..128) {
                            stringBuilder.append(Character.toChars(c.code + 65248))  // Zamiana na pełno-szerokie Unicode
                        } else {
                            stringBuilder.append(c)  // Pozostawienie innych znaków bez zmian
                        }
                    }
                }
                "subscript" -> {
                    // Subscript Unicode (znaki pod linią tekstu)
                    for (c in originalMessage.toCharArray()) {
                        stringBuilder.append(when (c) {
                            in '0'..'9' -> Character.toChars(c.code + 8272 - 10)  // Cyfry
                            else -> c  // Subscript nie obsługuje liter
                        })
                    }
                }
                "strikethrough" -> {
                    // Strikethrough (przekreślenie tekstu)
                    for (c in originalMessage.toCharArray()) {
                        stringBuilder.append(c).append('\u0336')  // Dodajemy znak przekreślenia
                    }
                }
                "normal" -> {
                    // Tryb normalny (brak modyfikacji wiadomości)
                    stringBuilder.append(originalMessage)
                }
            }

            // Ustawienie zmodyfikowanej wiadomości (prefiks + zmodyfikowana wiadomość)
            chatMessage.message = stringBuilder.toString()
        }
    }
}