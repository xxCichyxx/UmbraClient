/*
 * UmbraClient Hacked Client
 * A free open source mixin-based injection hacked client for Minecraft using Minecraft Forge by LiquidBounce.
 * https://github.com/xxCichyxx/UmbraClient
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.event.*
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.vulcan.VulcanScaffold
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.grim.GrimPlace
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.other.BasicDisabler
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.other.BasicDisabler.basicTypePrefix
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.other.NoRotationDisabler
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.other.NoRotationDisabler.valuePrefix
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.startsprint.StartSprint
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.verus.VerusCombat
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.verus.VerusFly
import net.ccbluex.liquidbounce.script.api.global.Chat
import net.ccbluex.liquidbounce.value.*

object Disabler : Module("Disabler", Category.EXPLOIT, hideModule = false) {

    private val disablerModes = arrayOf(
        // Start Sprint
        StartSprint,

        // Grim
        GrimPlace,

        // Vulcan
        VulcanScaffold,

        // Verus
        VerusFly,
        VerusCombat,

        //Other
        NoRotationDisabler,
        BasicDisabler
    )

    private val modes = disablerModes.map { it.modeName }.toTypedArray()

    val mode by object : MultiListValue("Mode", modes, listOf("StartSprint")) {
        override fun onChange(oldValue: List<String>, newValue: List<String>): List<String> {
            if (state)
                onDisable()

            return super.onChange(oldValue, newValue)
        }

        override fun onChanged(oldValue: List<String>, newValue: List<String>) {
            if (state)
                onEnable()
        }
    }

    val vulcanPacketTick by IntegerValue("PacketTick", 15, 1..20) { mode.contains("VulcanScaffold") }

    val grimDebug by BoolValue("GrimDebug", false) { mode.contains("GrimPlace") }

    val verusCombat by BoolValue("VerusCombat", false)
    val onlyCombat by BoolValue("OnlyCombat", true) { mode.contains("VerusCombat") }

    val spigotSpam by BoolValue("SpigotSpam", false)
    val message by TextValue("Message", "/skill") { spigotSpam }

    val modifyModeValue by ListValue("${valuePrefix}Mode", arrayOf("ConvertNull", "Spoof", "Zero", "SpoofZero", "Negative", "OffsetYaw", "Invalid"), "NoRotationDisabler") { mode.contains("NoRotationDisabler") }
    val offsetAmountValue by FloatValue("${valuePrefix}OffsetAmount", 6f, -180f.. 180f) { mode.contains("NoRotationDisabler") }

    val cancelC00Value by BoolValue("${basicTypePrefix}CancelC00", true) { mode.contains("BasicDisabler") }
    val cancelC0FValue by BoolValue("${basicTypePrefix}CancelC0F", true) { mode.contains("BasicDisabler") }
    val cancelC0AValue by BoolValue("${basicTypePrefix}CancelC0A", true) { mode.contains("BasicDisabler") }
    val cancelC0BValue by BoolValue("${basicTypePrefix}CancelC0B", true) { mode.contains("BasicDisabler") }
    val cancelC07Value by BoolValue("${basicTypePrefix}CancelC07", true) { mode.contains("BasicDisabler") }
    val cancelC13Value by BoolValue("${basicTypePrefix}CancelC13", true) { mode.contains("BasicDisabler") }
    val cancelC03Value by BoolValue("${basicTypePrefix}CancelC03", true) { mode.contains("BasicDisabler") }
    val c03NoMoveValue by BoolValue("${basicTypePrefix}C03-NoMove", true) { mode.contains("BasicDisabler") }

    private val debugValue by BoolValue("Debug", false)

    var isOnCombat = false

    @EventTarget
    fun onPacket(event: PacketEvent) {
        modeModules.forEach { it.onPacket(event) }
    }

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        modeModules.forEach { it.onUpdate() }
    }

    @EventTarget
    fun onMotion(event: MotionEvent) {
        modeModules.forEach { it.onMotion() }
    }

    @EventTarget
    fun onTick(event: GameTickEvent) {
        modeModules.forEach { it.onTick() }
    }

    @EventTarget
    fun onStrafe(event: StrafeEvent) {
        modeModules.forEach { it.onStrafe() }
    }

    @EventTarget
    fun onAttack(event: AttackEvent) {
        isOnCombat = true
        modeModules.forEach { it.onAttack() }
    }

    @EventTarget
    fun onWorld(event: WorldEvent) {
        isOnCombat = false
        modeModules.forEach { it.onWorld() }
    }

    override fun onEnable() {
        modeModules.forEach { it.onEnable() }
    }

    override fun onDisable() {
        modeModules.forEach { it.onDisable() }
    }

    fun debugMessage(str: String) {
        if (debugValue) {
            Chat.print("Â§f$str")
        }
    }

    private val modeModules
        get() = disablerModes.filter { mode.contains(it.modeName) }

    override val tag
        get() = mode.joinToString(" | ")

    override fun handleEvents() = super.handleEvents() && mc.thePlayer != null && mc.theWorld != null
}