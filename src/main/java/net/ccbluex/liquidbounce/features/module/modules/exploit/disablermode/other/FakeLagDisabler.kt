package net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.other

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes.DisablerMode
import net.ccbluex.liquidbounce.utils.MinecraftInstance
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.Value
import net.ccbluex.liquidbounce.script.api.global.Chat
import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.WorldEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler.c03NoMoveValue
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler.cancelC00Value
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler.cancelC03Value
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler.cancelC07Value
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler.cancelC0AValue
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler.cancelC0BValue
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler.cancelC0FValue
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler.cancelC13Value
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler.debugMessage
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler.fakeLagAttackValue
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler.fakeLagBlockValue
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler.fakeLagPosValue
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler.fakeLagSpoofValue
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler.lagDelayValue
import net.ccbluex.liquidbounce.features.module.modules.exploit.Disabler.lagDurationValue
import net.ccbluex.liquidbounce.utils.MovementUtils
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.utils.timing.MSTimer
import net.minecraft.network.Packet
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.play.client.*
import net.minecraft.network.play.client.C03PacketPlayer.*
import java.util.*

object FakeLagDisabler : DisablerMode("FakeLag") {
    private val packetBuffer = LinkedList<Packet<INetHandlerPlayServer>>()
    private var isSent = false
    private val fakeLagDelay = MSTimer()
    private val fakeLagDuration = MSTimer()

    override fun onEnable() {
        isSent = false
        packetBuffer.clear()
    }

    override fun onDisable() {
        for (packet in packetBuffer) {
            PacketUtils.sendPacketNoEvent(packet)
        }
        packetBuffer.clear()
    }

    fun onWorld(event: WorldEvent) {
        isSent = false
        fakeLagDuration.reset()
        fakeLagDelay.reset()
        packetBuffer.clear()
    }

    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (fakeLagDelay.hasTimePassed(lagDelayValue.get().toLong())) {
            if (isSent && fakeLagSpoofValue.get()) {
                PacketUtils.sendPacketNoEvent(C03PacketPlayer(true)) // Wysłanie pierwszego pakietu

                if (lagDurationValue.get() >= 300) {
                    PacketUtils.sendPacketNoEvent(C03PacketPlayer(true)) // Wysłanie drugiego pakietu, jeśli warunek spełniony
                }

                // Przeniesienie ustawienia isSent na false dopiero po wykonaniu operacji
                isSent = false
            }
            if (packet is C00PacketKeepAlive || packet is C0FPacketConfirmTransaction) {
                event.cancelEvent()
                packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
            }
            if (fakeLagAttackValue.get() && (packet is C02PacketUseEntity || packet is C0APacketAnimation)) {
                event.cancelEvent()
                packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
                if (packet is C0APacketAnimation) return
            }
            if (fakeLagBlockValue.get() && (packet is C07PacketPlayerDigging || packet is C08PacketPlayerBlockPlacement || packet is C0APacketAnimation)) {
                event.cancelEvent()
                packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
            }
            if (fakeLagPosValue.get() && (packet is C03PacketPlayer || packet is C0BPacketEntityAction)) {
                event.cancelEvent()
                packetBuffer.add(packet as Packet<INetHandlerPlayServer>)
            }
        }
    }

    override fun onUpdate() {
        if (!fakeLagDelay.hasTimePassed(lagDelayValue.get().toLong())) fakeLagDuration.reset()
        // Send
        if (fakeLagDuration.hasTimePassed(lagDurationValue.get().toLong())) {
            fakeLagDelay.reset()
            fakeLagDuration.reset()
            for (packet in packetBuffer) {
                PacketUtils.sendPacketNoEvent(packet)
            }
            debugMessage("Release buf(size=${packetBuffer.size})")
            isSent = true
            packetBuffer.clear()
        }
    }
}